[
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "task.models",
        "description": "task.models",
        "isExtraImport": true,
        "detail": "task.models",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "task.models",
        "description": "task.models",
        "isExtraImport": true,
        "detail": "task.models",
        "documentation": {}
    },
    {
        "label": "Participant",
        "importPath": "task.models",
        "description": "task.models",
        "isExtraImport": true,
        "detail": "task.models",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "home",
        "importPath": "task.views",
        "description": "task.views",
        "isExtraImport": true,
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "category_list",
        "importPath": "task.views",
        "description": "task.views",
        "isExtraImport": true,
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "event_list",
        "importPath": "task.views",
        "description": "task.views",
        "isExtraImport": true,
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "participant_list",
        "importPath": "task.views",
        "description": "task.views",
        "isExtraImport": true,
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "organizer_dashboard",
        "importPath": "task.views",
        "description": "task.views",
        "isExtraImport": true,
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "get_event_stats",
        "importPath": "task.views",
        "description": "task.views",
        "isExtraImport": true,
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "get_events",
        "importPath": "task.views",
        "description": "task.views",
        "isExtraImport": true,
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "event_detail",
        "importPath": "task.views",
        "description": "task.views",
        "isExtraImport": true,
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "search_events",
        "importPath": "task.views",
        "description": "task.views",
        "isExtraImport": true,
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "environ",
        "description": "environ",
        "detail": "environ",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "task.migrations.0001_initial",
        "description": "task.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),",
        "detail": "task.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "task.migrations.0002_event_image",
        "description": "task.migrations.0002_event_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('task', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='event',\n            name='image',\n            field=models.ImageField(blank=True, null=True, upload_to=''),\n        ),",
        "detail": "task.migrations.0002_event_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "task.migrations.0003_alter_event_image",
        "description": "task.migrations.0003_alter_event_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('task', '0002_event_image'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='event',\n            name='image',\n            field=models.URLField(blank=True, null=True),\n        ),",
        "detail": "task.migrations.0003_alter_event_image",
        "documentation": {}
    },
    {
        "label": "TaskConfig",
        "kind": 6,
        "importPath": "task.apps",
        "description": "task.apps",
        "peekOfCode": "class TaskConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'task'",
        "detail": "task.apps",
        "documentation": {}
    },
    {
        "label": "EventForm",
        "kind": 6,
        "importPath": "task.forms",
        "description": "task.forms",
        "peekOfCode": "class EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = '__all__'\n    def clean_image(self):\n        image = self.cleaned_data.get('image')\n        if image and not image.startswith(('http://', 'https://')):\n            raise ValidationError(\"Please provide a valid URL for the image.\")\n        return image\n    def clean_name(self):",
        "detail": "task.forms",
        "documentation": {}
    },
    {
        "label": "ParticipantForm",
        "kind": 6,
        "importPath": "task.forms",
        "description": "task.forms",
        "peekOfCode": "class ParticipantForm(forms.ModelForm):\n    class Meta:\n        model = Participant\n        fields = '__all__'\n    def clean_name(self):\n        name = self.cleaned_data.get('name')\n        if len(name) < 3:\n            raise ValidationError(\n                \"Participant name must be at least 3 characters long.\")\n        return name",
        "detail": "task.forms",
        "documentation": {}
    },
    {
        "label": "CategoryForm",
        "kind": 6,
        "importPath": "task.forms",
        "description": "task.forms",
        "peekOfCode": "class CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category\n        fields = ['name', 'description']\n        widgets = {\n            'name': forms.TextInput(attrs={\n                'class': 'mt-1 p-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500',\n                'placeholder': 'Enter category name',\n            }),\n            'description': forms.Textarea(attrs={",
        "detail": "task.forms",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "task.models",
        "description": "task.models",
        "peekOfCode": "class Category(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n    def __str__(self):\n        return self.name\nclass Event(models.Model):\n    image = models.URLField(blank=True, null=True)\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n    date = models.DateField()",
        "detail": "task.models",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "task.models",
        "description": "task.models",
        "peekOfCode": "class Event(models.Model):\n    image = models.URLField(blank=True, null=True)\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n    date = models.DateField()\n    time = models.TimeField()\n    location = models.CharField(max_length=100)\n    category = models.ForeignKey(\n        Category, on_delete=models.CASCADE, related_name='events')\n    def __str__(self):",
        "detail": "task.models",
        "documentation": {}
    },
    {
        "label": "Participant",
        "kind": 6,
        "importPath": "task.models",
        "description": "task.models",
        "peekOfCode": "class Participant(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField(unique=True)\n    events = models.ManyToManyField(Event, related_name='participants')\n    def __str__(self):\n        return self.name",
        "detail": "task.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "task.urls",
        "description": "task.urls",
        "peekOfCode": "urlpatterns = [\n    path('', home, name='home'),\n    path(\"category/add\", category_list, name=\"create_category\"),\n    path('events/add', event_list, name='event_list'),\n    path('participant/add', participant_list, name='participant_list'),\n    path('organizer/', organizer_dashboard, name='dashboard'),\n    path('api/event-stats/', get_event_stats, name='get_event_stats'),\n    path('api/events/', get_events, name='get_events'),\n    path('event-details/<int:event_id>/', event_detail, name='event_detail'),\n    path('search/', search_events, name='search_events'),",
        "detail": "task.urls",
        "documentation": {}
    },
    {
        "label": "category_list",
        "kind": 2,
        "importPath": "task.views",
        "description": "task.views",
        "peekOfCode": "def category_list(request):\n    categories = Category.objects.all()\n    form = CategoryForm()\n    category_to_edit = None\n    if request.method == \"POST\":\n        if \"create\" in request.POST:\n            form = CategoryForm(request.POST)\n            if form.is_valid():\n                form.save()\n                return redirect(\"create_category\")",
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "event_list",
        "kind": 2,
        "importPath": "task.views",
        "description": "task.views",
        "peekOfCode": "def event_list(request):\n    # events = Event.objects.all()\n    # categories = Category.objects.all()\n    events = Event.objects.select_related('category').all()\n    categories = Category.objects.prefetch_related('events').all()\n    event_to_edit = None\n    form = EventForm()\n    if request.method == \"POST\":\n        if \"create\" in request.POST:\n            form = EventForm(request.POST)",
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "participant_list",
        "kind": 2,
        "importPath": "task.views",
        "description": "task.views",
        "peekOfCode": "def participant_list(request):\n    # participants = Participant.objects.all()\n    participants = Participant.objects.prefetch_related('events').all()\n    form = ParticipantForm()\n    participant_to_edit = None\n    if request.method == \"POST\":\n        if \"create\" in request.POST:\n            form = ParticipantForm(request.POST)\n            if form.is_valid():\n                form.save()",
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "organizer_dashboard",
        "kind": 2,
        "importPath": "task.views",
        "description": "task.views",
        "peekOfCode": "def organizer_dashboard(request):\n    today = timezone.now().date()\n    total_participants = Participant.objects.count()\n    total_events = Event.objects.count()\n    upcoming_events = Event.objects.filter(date__gt=today).count()\n    past_events = Event.objects.filter(date__lt=today).count()\n    todays_events = Event.objects.filter(date=today)\n    context = {\n        'total_participants': total_participants,\n        'total_events': total_events,",
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "get_event_stats",
        "kind": 2,
        "importPath": "task.views",
        "description": "task.views",
        "peekOfCode": "def get_event_stats(request):\n    today = timezone.now().date()\n    total_events = Event.objects.count()\n    upcoming_events = Event.objects.filter(date__gt=today).count()\n    past_events = Event.objects.filter(date__lt=today).count()\n    data = {\n        'total_events': total_events,\n        'upcoming_events': upcoming_events,\n        'past_events': past_events,\n    }",
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "get_events",
        "kind": 2,
        "importPath": "task.views",
        "description": "task.views",
        "peekOfCode": "def get_events(request):\n    event_type = request.GET.get('type', 'all')\n    today = timezone.now().date()\n    if event_type == 'upcoming':\n        events = Event.objects.filter(date__gt=today)\n    elif event_type == 'past':\n        events = Event.objects.filter(date__lt=today)\n    else:\n        events = Event.objects.all()\n    event_list = [{",
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "event_detail",
        "kind": 2,
        "importPath": "task.views",
        "description": "task.views",
        "peekOfCode": "def event_detail(request, event_id):\n    event = get_object_or_404(Event.objects.select_related(\n        'category').prefetch_related('participants'), id=event_id)\n    participants = event.participants.all()\n    return render(request, 'event_detail.html', {'event': event, 'participants': participants})\n# def home(request):\n#     today = date.today()\n#     events = Event.objects.annotate(\n#         participant_count=Count('participants')).all()\n#     upcoming_events = Event.objects.filter(date__gte=today).annotate(",
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "task.views",
        "description": "task.views",
        "peekOfCode": "def home(request):\n    today = date.today()\n    selected_category = request.GET.get('category')\n    selected_date = request.GET.get('date')\n    if selected_date:\n        try:\n            selected_date = datetime.strptime(selected_date, \"%Y-%m-%d\").date()\n        except ValueError:\n            selected_date = None\n    events = Event.objects.annotate(participant_count=Count('participants')) \\",
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "search_events",
        "kind": 2,
        "importPath": "task.views",
        "description": "task.views",
        "peekOfCode": "def search_events(request):\n    query = request.GET.get('search', '')\n    events = Event.objects.filter(\n        Q(name__icontains=query) | Q(location__icontains=query)\n    ) if query else Event.objects.none()\n    return render(request, 'task/search_results.html', {'events': events, 'query': query})",
        "detail": "task.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "task_managemnt.asgi",
        "description": "task_managemnt.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "task_managemnt.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "task_managemnt.settings",
        "description": "task_managemnt.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nenv = environ.Env()\nenviron.Env.read_env()\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']",
        "detail": "task_managemnt.settings",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "task_managemnt.settings",
        "description": "task_managemnt.settings",
        "peekOfCode": "env = environ.Env()\nenviron.Env.read_env()\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\nCSRF_TRUSTED_ORIGINS = [\"https://*.onrender.com\", \"http://127.0.0.1:8000\"]",
        "detail": "task_managemnt.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "task_managemnt.settings",
        "description": "task_managemnt.settings",
        "peekOfCode": "SECRET_KEY = env(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\nCSRF_TRUSTED_ORIGINS = [\"https://*.onrender.com\", \"http://127.0.0.1:8000\"]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "task_managemnt.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "task_managemnt.settings",
        "description": "task_managemnt.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\nCSRF_TRUSTED_ORIGINS = [\"https://*.onrender.com\", \"http://127.0.0.1:8000\"]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "task_managemnt.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "task_managemnt.settings",
        "description": "task_managemnt.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\nCSRF_TRUSTED_ORIGINS = [\"https://*.onrender.com\", \"http://127.0.0.1:8000\"]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "task_managemnt.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "task_managemnt.settings",
        "description": "task_managemnt.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = [\"https://*.onrender.com\", \"http://127.0.0.1:8000\"]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'task',",
        "detail": "task_managemnt.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "task_managemnt.settings",
        "description": "task_managemnt.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'task',\n]\nMIDDLEWARE = [",
        "detail": "task_managemnt.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "task_managemnt.settings",
        "description": "task_managemnt.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'task_managemnt.urls'",
        "detail": "task_managemnt.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "task_managemnt.settings",
        "description": "task_managemnt.settings",
        "peekOfCode": "ROOT_URLCONF = 'task_managemnt.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "task_managemnt.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "task_managemnt.settings",
        "description": "task_managemnt.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "task_managemnt.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "task_managemnt.settings",
        "description": "task_managemnt.settings",
        "peekOfCode": "WSGI_APPLICATION = 'task_managemnt.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# DATABASES = {",
        "detail": "task_managemnt.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "task_managemnt.settings",
        "description": "task_managemnt.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'django.db.backends.postgresql',\n#         'NAME': env(\"DB_NAME\"),",
        "detail": "task_managemnt.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "task_managemnt.settings",
        "description": "task_managemnt.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "task_managemnt.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "task_managemnt.settings",
        "description": "task_managemnt.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "task_managemnt.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "task_managemnt.settings",
        "description": "task_managemnt.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "task_managemnt.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "task_managemnt.settings",
        "description": "task_managemnt.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "task_managemnt.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "task_managemnt.settings",
        "description": "task_managemnt.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "task_managemnt.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "task_managemnt.settings",
        "description": "task_managemnt.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "task_managemnt.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "task_managemnt.settings",
        "description": "task_managemnt.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "task_managemnt.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "task_managemnt.urls",
        "description": "task_managemnt.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('task.urls')),\n]",
        "detail": "task_managemnt.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "task_managemnt.wsgi",
        "description": "task_managemnt.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "task_managemnt.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'task_managemnt.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]